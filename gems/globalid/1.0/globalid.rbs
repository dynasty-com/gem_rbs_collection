class GlobalID
  class Verifier < ActiveSupport::MessageVerifier
    private

    def encode: (untyped data) -> untyped

    def decode: (untyped data) -> untyped
  end
end

class GlobalID
  module Identification
    def to_global_id: (?::Hash[untyped, untyped] options) -> untyped

    alias to_gid to_global_id

    def to_gid_param: (?::Hash[untyped, untyped] options) -> untyped

    def to_signed_global_id: (?::Hash[untyped, untyped] options) -> untyped

    alias to_sgid to_signed_global_id

    def to_sgid_param: (?::Hash[untyped, untyped] options) -> untyped
  end
end

class GlobalID
  module FixtureSet
    def signed_global_id: (untyped fixture_set_name, untyped label, ?column_type: ::Symbol column_type, **untyped options) -> untyped
  end
end

class GlobalID
  class Railtie < Rails::Railtie
  end
end

class GlobalID
  module Locator
    # Takes either a GlobalID or a string that can be turned into a GlobalID
    #
    # Options:
    # * <tt>:only</tt> - A class, module or Array of classes and/or modules that are
    #   allowed to be located.  Passing one or more classes limits instances of returned
    #   classes to those classes or their subclasses.  Passing one or more modules in limits
    #   instances of returned classes to those including that module.  If no classes or
    #   modules match, +nil+ is returned.
    def self.locate: (untyped gid, ?::Hash[untyped, untyped] options) -> untyped

    # Takes an array of GlobalIDs or strings that can be turned into a GlobalIDs.
    # All GlobalIDs must belong to the same app, as they will be located using
    # the same locator using its locate_many method.
    #
    # By default the GlobalIDs will be located using Model.find(array_of_ids), so the
    # models must respond to that finder signature.
    #
    # This approach will efficiently call only one #find (or #where(id: id), when using ignore_missing)
    # per model class, but still interpolate the results to match the order in which the gids were passed.
    #
    # Options:
    # * <tt>:only</tt> - A class, module or Array of classes and/or modules that are
    #   allowed to be located.  Passing one or more classes limits instances of returned
    #   classes to those classes or their subclasses.  Passing one or more modules in limits
    #   instances of returned classes to those including that module.  If no classes or
    #   modules match, +nil+ is returned.
    # * <tt>:ignore_missing</tt> - By default, locate_many will call #find on the model to locate the
    #   ids extracted from the GIDs. In Active Record (and other data stores following the same pattern),
    #   #find will raise an exception if a named ID can't be found. When you set this option to true,
    #   we will use #where(id: ids) instead, which does not raise on missing records.
    def self.locate_many: (untyped gids, ?::Hash[untyped, untyped] options) -> untyped

    # Takes either a SignedGlobalID or a string that can be turned into a SignedGlobalID
    #
    # Options:
    # * <tt>:only</tt> - A class, module or Array of classes and/or modules that are
    #   allowed to be located.  Passing one or more classes limits instances of returned
    #   classes to those classes or their subclasses.  Passing one or more modules in limits
    #   instances of returned classes to those including that module.  If no classes or
    #   modules match, +nil+ is returned.
    def self.locate_signed: (untyped sgid, ?::Hash[untyped, untyped] options) -> untyped

    # Takes an array of SignedGlobalIDs or strings that can be turned into a SignedGlobalIDs.
    # The SignedGlobalIDs are located using Model.find(array_of_ids), so the models must respond to
    # that finder signature.
    #
    # This approach will efficiently call only one #find per model class, but still interpolate
    # the results to match the order in which the gids were passed.
    #
    # Options:
    # * <tt>:only</tt> - A class, module or Array of classes and/or modules that are
    #   allowed to be located.  Passing one or more classes limits instances of returned
    #   classes to those classes or their subclasses.  Passing one or more modules in limits
    #   instances of returned classes to those including that module.  If no classes or
    #   modules match, +nil+ is returned.
    def self.locate_many_signed: (untyped sgids, ?::Hash[untyped, untyped] options) -> untyped

    # Tie a locator to an app.
    # Useful when different apps collaborate and reference each others' Global IDs.
    #
    # The locator can be either a block or a class.
    #
    # Using a block:
    #
    #   GlobalID::Locator.use :foo do |gid|
    #     FooRemote.const_get(gid.model_name).find(gid.model_id)
    #   end
    #
    # Using a class:
    #
    #   GlobalID::Locator.use :bar, BarLocator.new
    #
    #   class BarLocator
    #     def locate(gid)
    #       @search_client.search name: gid.model_name, id: gid.model_id
    #     end
    #   end
    def self.use: (untyped app, ?untyped? locator) { () -> untyped } -> untyped

    private

    def self.locator_for: (untyped gid) -> untyped

    def self.find_allowed?: (untyped model_class, ?untyped? only) -> untyped

    def self.parse_allowed: (untyped gids, ?untyped? only) -> untyped

    def self.normalize_app: (untyped app) -> untyped

    class BaseLocator
      def locate: (untyped gid) -> untyped

      def locate_many: (untyped gids, ?::Hash[untyped, untyped] options) -> untyped

      private

      def find_records: (untyped model_class, untyped ids, untyped options) -> untyped
    end

    class UnscopedLocator < BaseLocator
      def locate: (untyped gid) -> untyped

      private

      def find_records: (untyped model_class, untyped ids, untyped options) -> untyped

      def unscoped: (untyped model_class) { () -> untyped } -> untyped
    end

    DEFAULT_LOCATOR: untyped

    class BlockLocator
      def initialize: (untyped block) -> void

      def locate: (untyped gid) -> untyped

      def locate_many: (untyped gids, ?::Hash[untyped, untyped] options) -> untyped
    end
  end
end

class SignedGlobalID < GlobalID
  class ExpiredMessage < StandardError
  end

  attr_accessor self.verifier: untyped

  def self.parse: (untyped sgid, ?::Hash[untyped, untyped] options) -> untyped

  # Grab the verifier from options and fall back to SignedGlobalID.verifier.
  # Raise ArgumentError if neither is available.
  def self.pick_verifier: (untyped options) -> untyped

  attr_accessor self.expires_in: untyped

  DEFAULT_PURPOSE: "default"

  def self.pick_purpose: (untyped options) -> untyped

  private

  def self.verify: (untyped sgid, untyped options) -> untyped

  def self.raise_if_expired: (untyped expires_at) -> untyped

  public

  attr_reader verifier: untyped

  attr_reader purpose: untyped

  attr_reader expires_at: untyped

  def initialize: (untyped gid, ?::Hash[untyped, untyped] options) -> void

  def to_s: () -> untyped

  alias to_param to_s

  def to_h: () -> ::Hash[::String, untyped]

  def ==: (untyped other) -> untyped

  private

  def encoded_expiration: () -> untyped

  def pick_expiration: (untyped options) -> untyped
end

class GlobalID
  attr_reader self.app: untyped

  def self.create: (untyped model, ?::Hash[untyped, untyped] options) -> untyped

  def self.find: (untyped gid, ?::Hash[untyped, untyped] options) -> untyped

  def self.parse: (untyped gid, ?::Hash[untyped, untyped] options) -> untyped

  def self.app=: (untyped app) -> untyped

  private

  def self.parse_encoded_gid: (untyped gid, untyped options) -> untyped

  # We removed the base64 padding character = during #to_param, now we're adding it back so decoding will work
  def self.repad_gid: (untyped gid) -> untyped

  public

  attr_reader uri: untyped

  def initialize: (untyped gid, ?::Hash[untyped, untyped] options) -> void

  def find: (?::Hash[untyped, untyped] options) -> untyped

  def model_class: () -> untyped

  def ==: (untyped other) -> untyped

  alias eql? ==

  def hash: () -> untyped

  def to_param: () -> untyped
end

module URI
  class GID < Generic
    # URI::GID encodes an app unique reference to a specific model as an URI.
    # It has the components: app name, model class name, model id and params.
    # All components except params are required.
    #
    # The URI format looks like "gid://app/model_name/model_id".
    #
    # Simple metadata can be stored in params. Useful if your app has multiple databases,
    # for instance, and you need to find out which one to look up the model in.
    #
    # Params will be encoded as query parameters like so
    # "gid://app/model_name/model_id?key=value&another_key=another_value".
    #
    # Params won't be typecast, they're always strings.
    # For convenience params can be accessed using both strings and symbol keys.
    #
    # Multi value params aren't supported. Any params encoding multiple values under
    # the same key will return only the last value. For example, when decoding
    # params like "key=first_value&key=last_value" key will only be last_value.
    #
    # Read the documentation for +parse+, +create+ and +build+ for more.
    alias app host

    attr_reader model_name: untyped

    attr_reader model_id: untyped

    attr_reader params: untyped

    # Raised when creating a Global ID for a model without an id
    class MissingModelIdError < URI::InvalidComponentError
    end

    # Validates +app+'s as URI hostnames containing only alphanumeric characters
    # and hyphens. An ArgumentError is raised if +app+ is invalid.
    #
    #   URI::GID.validate_app('bcx')     # => 'bcx'
    #   URI::GID.validate_app('foo-bar') # => 'foo-bar'
    #
    #   URI::GID.validate_app(nil)       # => ArgumentError
    #   URI::GID.validate_app('foo/bar') # => ArgumentError
    def self.validate_app: (untyped app) -> untyped

    # Create a new URI::GID by parsing a gid string with argument check.
    #
    #   URI::GID.parse 'gid://bcx/Person/1?key=value'
    #
    # This differs from URI() and URI.parse which do not check arguments.
    #
    #   URI('gid://bcx')             # => URI::GID instance
    #   URI.parse('gid://bcx')       # => URI::GID instance
    #   URI::GID.parse('gid://bcx/') # => raises URI::InvalidComponentError
    def self.parse: (untyped uri) -> untyped

    # Shorthand to build a URI::GID from an app, a model and optional params.
    #
    #   URI::GID.create('bcx', Person.find(5), database: 'superhumans')
    def self.create: (untyped app, untyped model, ?untyped? params) -> untyped

    # Create a new URI::GID from components with argument check.
    #
    # The allowed components are app, model_name, model_id and params, which can be
    # either a hash or an array.
    #
    # Using a hash:
    #
    #   URI::GID.build(app: 'bcx', model_name: 'Person', model_id: '1', params: { key: 'value' })
    #
    # Using an array, the arguments must be in order [app, model_name, model_id, params]:
    #
    #   URI::GID.build(['bcx', 'Person', '1', key: 'value'])
    def self.build: (untyped args) -> untyped

    def to_s: () -> ::String

    def set_path: (untyped path) -> untyped

    # Ruby 2.2 uses #query= instead of #set_query
    def query=: (untyped query) -> untyped

    # Ruby 2.1 or less uses #set_query to assign the query
    def set_query: (untyped query) -> untyped

    def set_params: (untyped params) -> untyped

    private

    COMPONENT: ::Array[:scheme | :app | :model_name | :model_id | :params]

    # Extracts model_name and model_id from the URI path.
    PATH_REGEXP: ::Regexp

    def check_host: (untyped host) -> untyped

    def check_path: (untyped path) -> untyped

    def check_scheme: (untyped scheme) -> untyped

    def set_model_components: (untyped path, ?bool validate) -> untyped

    def validate_component: (untyped component) -> untyped

    def validate_model_id: (untyped model_id, untyped model_name) -> untyped

    def parse_query_params: (untyped query) -> untyped
  end
end


class GlobalID
  extend ActiveSupport::Autoload

  def self.eager_load!: () -> untyped
end
